on: workflow_dispatch

permissions: write-all

jobs:
  cp_beta:
    name: cp_beta
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Flutter Beta
        uses: actions/checkout@v4
        with:
          ref: beta
          repository: flutter/flutter
          token: ${{ github.token }}
      - name: Read Beta Candidate Name
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./bin/internal/release-candidate-branch.version
      # https://stackoverflow.com/questions/57968497
      # Doesn't work with nektos/act, but works on real github workflows.
      - name: Set Beta Branch
        run: |
          echo "BETA_BRANCH=${{ steps.version.outputs.content }}" >> $GITHUB_ENV
      - name: Trim Ending newline
        run: |
          echo "BETA_BRANCH=$(echo $BETA_BRANCH | tr -d '\n')" >> $GITHUB_ENV
      # Use jq to get approvers. The requested_reviewer field in payload doesn't include approvers.
      # See https://api.github.com/repos/flutter/flutter/pulls/136842 as an example.
      - name: Get Approver
        # Replace whitespace with commas.
        # TODO(xilaizhang):change this to actual pr number
        run: |
          RAW_APPROVERS=$(gh pr view --json reviews -q ".reviews[] | select(.state == \"APPROVED\") | .author.login" -R flutter/flutter 136658 --comments)
          APPROVERS=($RAW_APPROVERS)
          echo "APPROVER=${APPROVERS[0]}" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ github.token }}
      # echo "GITHUB_SHA=${{ github.event.pull_request.merge_commit_sha }}" >> $GITHUB_ENV
      - name: Store Merged Sha
        run: |
          echo "MERGED_SHA=5ebdf55c9e5e1b16dde5ccb54376f47ae8fe1148" >> $GITHUB_ENV
      - name: Create cp body template
        run : |
          CP_TEMPLATE="**What is this PR?**<br>"
          CP_TEMPLATE+="This is a pull request that cherry picks ${MERGED_SHA} into the beta release branch.<br><br>"
          CP_TEMPLATE+="**Why this PR?**<br>"
          CP_TEMPLATE+="The label 'cp: merge-to-beta' was added to the initial PR.<br><br>"
          CP_TEMPLATE+="**Have Questions?**<br>"
          CP_TEMPLATE+="Open an issue for team-release, or ping @flutter-release-eng<br>"
          echo "CP_TEMPLATE=${CP_TEMPLATE}" >> $GITHUB_ENV
      - name: Create cp template when merge conflict
        run : |
          CP_WARNING="**Note: There was an error when cherry picking the intial pull request**<br>"
          CP_WARNING+="**This is a forced cherry pick. This PR is generated by accepting theirs.**<br>"
          CP_WARNING+="**If this PR doesn't look right, please manually resolve the conflicts.**<br><br>"
          CP_WARNING="${CP_TEMPLATE}${CP_WARNING}"
          echo "CP_WARNING=${CP_WARNING}" >> $GITHUB_ENV
      - name: Print Context
        run: |
          echo "Beta branch is ${BETA_BRANCH}"
          echo "Approver is ${APPROVER}"
          echo "Merged sha to be cherry picked is ${MERGED_SHA}"
          echo "CP pull request template is ${CP_TEMPLATE}"
      # TODO: change repo to flutter/flutter later
      - name: Checkout Flutter master
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master
          token: ${{ github.token }}
      # note: you need a space between @ mentions and username.
      - name: git
        run: |
          # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
          git --version
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git checkout -b cp-6 --track origin/${BETA_BRANCH}
          echo "head sha is $(git rev-parse cp-6)"
          git cherry-pick ${MERGED_SHA}
          git status
          git push -u origin cp-6
          gh pr create --title "[flutter-release][cp-beta]${MERGED_SHA}" --reviewer XilaiZhang --body "${CP_TEMPLATE}" --base origin/${BETA_BRANCH}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      # Force a cherry pick by accepting theirs ( the cp ) if there is a merge conflict. Inform author.
      - name: Force Cherrypick
        if: ${{ failure() }}
        run: |
          git cherry-pick --abort
          git checkout master
          git checkout -b cp-force-2 --track origin/${BETA_BRANCH}
          echo "head sha is $(git rev-parse cp-force-2)"
          git cherry-pick -Xtheirs ${MERGED_SHA}
          git status
          git push -u origin cp-force-2
          gh pr create --title "[force][cp-beta]${MERGED_SHA}" --reviewer XilaiZhang --body "${CP_WARNING}" --base origin/${BETA_BRANCH}
        env:
          GITHUB_TOKEN: ${{ github.token }}
